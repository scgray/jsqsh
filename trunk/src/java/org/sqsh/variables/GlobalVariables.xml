<Variables>
	<String name="prompt" value="#if($connected==true)[$server][$user] #end$lineno>">
        <Description>Defines the query prompt</Description>
        <Help><![CDATA[
VARIABLE
   prompt - Defines the query prompt.

DESCRIPTION
   The ${prompt} variable defines the prompt that will be displayed before
   each line of input. Unlike other variables, this variable may, itself,
   contain variables that will be expanded prior to display.
   
   For example, the default value:
   
      #if($connected==true)[$server][$user] #end$lineno>
      
   will show:
   
      1>
      
   when not connected to a server and:
   
      [prod-db][sa] 1> 
      
   when connected (the #if/#end syntax is part of Velocity, the tool
   that is used to expand variables. Documentation is available from
   http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html).
   
   Care must be taken when setting this variable to ensure that the
   varables are not expanded when it is being set. For example:
   
      1> \set prompt="$lineno>"
      
   will have the $lineno expanded at the time the prompt is set and
   is exactly identical to:
   
      1> \set prompt="1>"
      
   which clearly isn't what you inteded. Instead use single quotes:
   
      1> \set prompt='$lineno>'
   
SEE ALSO
   \set
        ]]></Help>
	</String>
	
	<String name="terminator" value=";">
        <Description>Defines the SQL statement terminator</Description>
        <Help><![CDATA[
VARIABLE
   terminator - Defines the SQL statement terminator.

DESCRIPTION
   The ${terminator} variable defines a single character that can be used
   to terminate a SQL statement or block and cause it to be executed without
   having to issue a '\go', for example:
   
       1> select * from sysobjects;
       
   will directly execute the query because ';' is the current terminator.
   
   \unset'ing this variable disables the in-line query terminator feature
   and requires that you explicitly issue a '\go' to execute your queries.
   
   Be very careful choosing an alternative terminator, since you don't
   want to be inadvertantly executing queries.
   
SEE ALSO
   \go, \unset
        ]]></Help>
	</String>
	
	
	
	<!-- Property values are referring to properties of the session -->
	<Property bean="global" name="lineno" property="bufferManager.current.lineNumber">
        <Description>Contains the current line number being entered</Description>
        <Help><![CDATA[
VARIABLE
   lineno - Contains the current line number being entered

DESCRIPTION
   The ${lineno} variable contains the current line number being entered
   into the current SQL buffer. This variable cannot be set directly. To
   clear the current buffer (and thus revert to line 1) utilize the '\reset'
   command.
   
SEE ALSO
   \reset
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="histsize" property="bufferManager.maxBuffers">
		<Description>Controls the number of SQL statements retained in history</Description>
        <Help><![CDATA[
VARIABLE
   histsize - Controls the number of SQL statements retained in history

DESCRIPTION
   The ${histsize} variable determines the number of SQL statements
   that is retained historically (the default is 50). Each time a 
   SQL statement is executed with the '\go' command, that statement
   is saved away and be re-edited and re-executed later if desired.
   
   The '\history' command shows the last ${histsize} SQL statements
   executed and '\buf-edit' can be used to edit and re-run a 
   previously executed statement. Also, see '\help buffers' for
   details on how to refer to specific buffers.
   
SEE ALSO
   buffers, \history
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="precision" property="dataFormatter.scale">
		<Description>Controls the decimal place precision of values</Description>
        <Help><![CDATA[
VARIABLE
   precision - Controls the decimal place precision of numeric values

DESCRIPTION
   The ${precision} variable controls the number of decimal places that
   will be displayed for floating point values. This applies to real, float,
   and double datatypes only. Numbers defined as NUMERIC or NUMBER (or
   similar fixed precision and scale values) are displayed as they are 
   defined in the database.
        ]]></Help>
	</Property>
	
	<Property bean="global" name="fmt_date" property="dataFormatter.dateFormat">
		<Description>Controls the representation of date</Description>
        <Help><![CDATA[
VARIABLE
   fmt_date - Controls the representation of date values.

DESCRIPTION
   The ${fmt_date} variable contains a format string that is utilized
   when display columns of type DATE. The format string follows java
   SimpleDateFormat conventions, which are documented here:
   
      http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html
      
   The default is 'MMM dd yyyy'.
   
SEE ALSO
   fmt_datetime, fmt_time
        ]]></Help>
	</Property>
	
	
	
	
	<Property bean="global" name="fmt_time" property="dataFormatter.timeFormat">
		<Description>Controls the representation of time</Description>
        <Help><![CDATA[
VARIABLE
   fmt_time - Controls the representation of time values.

DESCRIPTION
   The ${fmt_time} variable contains a format string that is utilized
   when display columns of type TIME. The format string follows java
   SimpleDateFormat conventions, which are documented here:
   
      http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html
      
   The default is 'HH:mm'.
   
SEE ALSO
   fmt_datetime, fmt_time
        ]]></Help>
	</Property>
	
	
	<Property bean="global" name="fmt_datetime" property="dataFormatter.datetimeFormat">
		<Description>Controls the representation of datatimes</Description>
        <Help><![CDATA[
VARIABLE
   fmt_datetime - Controls the representation of datatime values.

DESCRIPTION
   The ${fmt_datetime} variable contains a format string that is utilized
   when display columns of type DATETIME. The format string follows java
   SimpleDateFormat conventions, which are documented here:
   
      http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html
      
   The default is 'MMM dd yyyy HH:mm:ss'.
   
SEE ALSO
   fmt_date, fmt_time
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="null" property="dataFormatter.null">
		<Description>Controls the representation of nulls</Description>
        <Help><![CDATA[
VARIABLE
   null - Controls the visual representation of nulls

DESCRIPTION
   The ${null} variable is used when displaying null values. The default
   value is "[NULL]", which will be shown whenever a null value is 
   encountered.
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="maxlen" property="rendererManager.maxColumnWidth">
		<Description>The maximum display width of a column</Description>
        <Help><![CDATA[
VARIABLE
   maxlen - The maximum display width of a column

DESCRIPTION
   The ${maxlen} variable determines the maximum width that any individual
   column may consume (the default is 35). Columns exceeding that width 
   will have their contents word-wrapped, if necessary, during display. This
   variable may not be utilized in all display styles (e.g. it is ignored
   by the 'perfect' style).
   
SEE ALSO
   style
        ]]></Help>
	</Property>
	

	
	<Property bean="global" name="maxrows" property="SQLRenderer.maxRows">
		<Description>Limits the size of query results</Description>
        <Help><![CDATA[
VARIABLE
   maxrows - Limits the size of query results.

DESCRIPTION
   The ${maxrows} variable can be used to limit the number of rows returned
   by any individual query in a batch of SQL (the default is 500). A value
   of zero or less indicates that query result sizes should be unlimited.
   
   For certain display styles (see '\help style'), query results are retained
   entirely in memory so it is important the results not be unbounded.
   
SEE ALSO
   style
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="expand" property="SQLRenderer.expand">
		<Description>Determines if SQL will have variable expansion performed</Description>
        <Help><![CDATA[
VARIABLE
   expand - Determines if SQL will have variable expansion performed

DESCRIPTION
   The ${expand} variable is a boolean, accepting either "true" (the default)
   or "false". The value of this variable will be used to determine if sqsh
   will attempt to expand SQL statements being executed of any sqsh variables
   they may contain before execution.
   
SEE ALSO
   \go
        ]]></Help>
	</Property>
	
	
	
	<Property bean="global" name="shell" property="shellManager.shellCommand">
		<Description>Defines the O/S shell used to execute commands</Description>
        <Help><![CDATA[
VARIABLE
   shell - Defines the O/S shell that is used to execute commands

DESCRIPTION
   The ${shell} variable defines the external operating system program (shell)
   that will be used when executing external commands. This variable is
   used when:
   
   - Executing a pipe (e.g. go | more)
   - Utilizing a back-tick (e.g. '\echo `echo hi`)
   - Running external editors (e.g. by \buf-edit).
   
   The variable must contain the name of the shell, plus a comma-delimited
   list of arguments to pass to the shell. A special argument of "?" must
   be provided to indicate where the command being executed should be 
   placed.
   
   On UNIX platforms, ${shell} will be defaulted to:
   
       /bin/sh,-c,?
       
   which means, for example, when running "go | more", the "more" command
   will be launched via:
   
      /bin/sh -c "more"
      
   On Windows platforms ${shell} will be defaulted to:
   
      cmd.exe,/c,?
      
SEE ALSO
   \buf-edit
        ]]></Help>
	
	</Property>
	
	
	
	<Property bean="global" name="dflt_database" property="driverManager.defaultDatabase">
		<Description>Controls the default database for new connections</Description>
        <Help><![CDATA[
VARIABLE
   dflt_database - Controls the default database for new connections

DESCRIPTION
   The "dflt_database" variable can be used to place new connections in 
   a specific database (or catalog, in JDBC terminology).
   
SEE ALSO
   database
        ]]></Help>
    </Property>
    
    
	
	<Property bean="global" name="dflt_autocommit" property="driverManager.defaultAutoCommit">
		<Description>Controls the autocommit setting for new connections</Description>
        <Help><![CDATA[
VARIABLE
   dflt_autocommit - Controls the autocommit setting for new connections

DESCRIPTION
   The "dflt_autocommit" variables controls the SQL auto-commit setting 
   that will be set for all new connections that are created.  Auto-commit
   refers to the transaction mode that a connection uses; when auto-commit
   is true, then each statement issued is executed as if it was in its
   own transaction (that is, as if the user typed 'commit' after executing
   the statement.  When auto-commit is false, then the connection stays
   in an open transaction until you explicitly issue a commit to the database.
   
SEE ALSO
   autocommit
        ]]></Help>
    </Property>
	
    <Property bean="global" name="style"
              property="rendererManager.defaultRenderer">
        <Description>Controls the display style of SQL output</Description>
        <Help><![CDATA[
VARIABLE
   style - Controls the display style of SQL output
   
DESCRIPTION
   The '$style' variable can be set to switch how sqsh displays its results
   to the user. Currently the following display styles are supported:
   
   perfect  - This is the default display style and is very similar to how
        tools like the mySQL client display their output. The output is 
        contained in a text-based grid, like so:
              
           +----------+----------+
           | COLUMN 1 | COLUMN 2 |
           +----------+----------+
           |     1234 | hello    |
           +----------+----------+
              
        The style is called 'perfect' because it holds the entire results
        of the query in memory and analyzes the length of the values 
        before they are displayed, ensuring that columns are no wider than
        they to be.  This is probably the most pleasant display style but
        is memory intensive and not suitable for working with  large results.
   
   pretty   - This is visually identical to 'perfect' except that it does not
        attempt to perform a perfect fit on the data before display and,
        thus, does not need to hold the results in memory during display.
        
   csv      - Displays the output as a set of comma separated values suitable
        for loading into, say, Excel. The results displayed attempts to 
        conform to: http://www.creativyst.com/Doc/Articles/CSV/CSV01.htm.
 
SEE ALSO
   maxrows, maxlen
        ]]></Help>
    </Property>
    
    <Property bean="global" name="classpath"
              property="driverManager.classpath">
        <Description>Defines JDBC driver locations</Description>
        <Help><![CDATA[
VARIABLE
   classpath - Defines additional JDBC driver search locations
   
DESCRIPTION
   The ${classpath} variable can be used to specify places in which 
   JDBC drivers can be found on your system. The path is specified
   as a delimited list of ".jar" files or directories containing ".jar"
   files.  The delimiter is ";" on Windows or ":" on UNIX.  The following
   is an example of a valid UNIX classpath:
   
      /home/gray/jars/sybase.jar:/home/gray/drivers/
      
   where the first entry is an explicitly specified jar file ("sybase.jar")
   and the second entry is the path to a directory that contains multiple
   jars, each of which will become part of the classpath.
   
SEE ALSO
   \drivers
        ]]></Help>
    </Property>
    
    <Property bean="global" name="headers"
              property="rendererManager.showHeaders">
        <Description>Controls column header display</Description>
        <Help><![CDATA[
VARIABLE
   headers - Controls the display of column headers
   
DESCRIPTION
   The ${headers} variable can be used to turn on or off the display of
   column header information in query results.  The default value is "true".
   
SEE ALSO
   footers
        ]]></Help>
    </Property>
    
    <Property bean="global" name="footers"
              property="rendererManager.showFooters">
        <Description>Controls query footer information</Description>
        <Help><![CDATA[
VARIABLE
   footers - Controls the display of query footer information
   
DESCRIPTION
   The ${footers} variable can be used to turn on or off the display of
   query footer information in query results. Footer information includes
   the row count, update count, and query timing that is normally displayed
   after each result set is displayed. The default value is "true".
   
SEE ALSO
   headers
        ]]></Help>
    </Property>
</Variables>
<Commands>
    <Command name="\echo" class="org.sqsh.commands.Echo">
        
        <Description><![CDATA[
           Displays a line of text.
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
   \echo [-n] [string] [...]
              
DESCRIPTION
   Echos the string(s) to standard out.
           
OPTIONS:
   -n  Do not output a new-line character at the end of the string.
      ]]></Help>
    </Command>
    
    <Command name="\session" class="org.sqsh.commands.SessionCmd">
        
        <Description><![CDATA[
           Displays set of sessions or switches to another session.
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
   \session [session_id]
              
DESCRIPTION
   If no arguments are provided then a list of currently active
   sessions is displayed, otherwise the session id provided is
   switched to.
           
OPTIONS:
   None.
            ]]></Help>
       </Command>
    
<Command name="\quit" class="org.sqsh.commands.Quit">
        
        <Description><![CDATA[
           Exits sqsh
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
   \quit
              
DESCRIPTION
   Exits sqsh
           
OPTIONS:
   None.
           ]]></Help>
    </Command>
    
    <Command name="\drivers" class="org.sqsh.commands.Drivers">
        <Description><![CDATA[
           Displays a list of JDBC drivers known by sqsh.
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
   \drivers
              
DESCRIPTION
   Displays a list of drivers that are currently registered with
   sqsh. An asterisk (*) will be displayed next to drivers for
   which the actual JDBC implementation (.jar file) is available.

   Sqsh comes bundled with one JDBC driver (jtds) which should
   be sufficient to communicate with Microsoft SQL Server or Sybase
   ASE. Additional drivers can be made available in one of three ways:
   
   1. Setting the ${classpath} sqsh variable to a location containing
      JDBC jar(s) for the driver(s) you want (see '\help classpath').
   
   2. Making sure the driver is  contained in your CLASSPATH environment
      variable, e.g., for UNIX or cygwin:

        $ CLASSPATH=/path/to/some/jdbc/driver.jar:"$CLASSPATH"
        $ export CLASSPATH

     or, for Windows:
   
        C:\> set CLASSPATH=/path/to/some/jdbc/driver.jar; %CLASSPATH%
        
   3. Alternatively, you can add a JDBC driver implementation to sqsh's
      startup jar directory. The path to this directory can vary from
      platform to platform but can typically be found in one of the
      following locations relative to where the jsqsh binary is located:

         ../lib
         ../share
         ../share/jsqsh

DRIVER DEFINITION FILE
   Sqsh comes with a bunch of pre-defined driver definitions built-in,
   however you can provide your own additional definitions if you wish
   by editing the $HOME/.jsqsh/drivers.xml. This file contains lots
   of comments describing the structure of the file.
           
OPTIONS:
   None
   
SEE ALSO
   classpath
           ]]></Help>
        </Command>
    
     <Command name="\history" class="org.sqsh.commands.History">
        <Description><![CDATA[
           Displays a history of SQL statements executed
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
   \history [-a]
              
DESCRIPTION
   Displays a history of SQL statements executed.
           
OPTIONS:
   -a    Show all of every SQL statement executed. If this flag is not
         provided only the first 10 lines of any SQL statement will be
         displayed.
           ]]></Help>
    </Command>
    
    <Command name="\connect" class="org.sqsh.commands.Connect">
        <Description><![CDATA[
           Establishes a connection to a database.
        ]]></Description>
            <Help><![CDATA[
SYNOPSIS
  \connect [options] [jdbc-url]
              
DESCRIPTION
  The \connect command attempts to establish a JDBC connection
  to a database server.  If a connection is successfully 
  established then the connection become sthe active connection
  for the current session. If the session already had a connection
  established, then the existing connection is closed and replaced
  with the new connection.
              
  The JDBC URL that is used to connect can be supplied 
  explicitly via either via the "jdbc-url" argument or a 
  driver definition name can be provided ("driver-name") that
  will provide the URL (to see a list of available drivers
  use the \drivers command).
              
  The URL's provided will be expanded of all variable references
  prior to use and thus may refer to variable values that are
  defined in the session or via the SQLDriver itself. 
              
OPTIONS:
  Most of the options to \connect work by setting variables
  that the JDBC URL may (or may not) refer to. To determine
  if the driver you want to use utilizes the variable, use
  the \drivers command. If a connection is successfully established
  these properties will be available to the session.

  -d driver   The name of the jsqsh driver definition that will
              be used for the connection (use \drivers to see
              a list). If this flag is not supplied, the value
              of ${driver} will be used.
              
  -S server   Sets the ${server} property. This typically defines
              the hostname of the server you wish to connect to.
                         
  -p port     Sets the ${port} property. This typically defines
              the listenting port of the server you wish to 
              connect to. Most drivers will provide a default
              value for this property if it is not supplied.
                          
  -D database Sets the ${database} property. This will cause 
              the database context to be set to the provided
              database following connection to the server (in 
              the JDBC world the database context is known as 
              the "catalog"). Not all drivers support this behavior.
                          
  -U username Sets the ${user} property that deterimines the 
              username that will be utilized to connect to the
              datbase.
                          
  -P password Sets the ${password} property that will be used
              to authenticate with the server.
                          
  -s SID      Sets the ${SID} property, and provides the Oracle 
              SID that will be used when connecting to Oracle.
               
  -c class    When utilizing a direct JDBC url (and not a sqsh
              driver definition), this should be utilized to
              define which JDBC driver class will be utilized
              for the connection.
                          
   -n         Create a new session for this connect without
              closing the connection in the current session.
                          
   jdbc-url   An explicit JDBC url to be utilized for the 
              connection. In most cases it will be necessary
              to provide the implementing JDBC class name 
              with the -c flag when providing an explicit URL.
               
]]></Help>
</Command>
    
<Command name="\go" class="org.sqsh.commands.Go">
<Description><![CDATA[
   Executes the contents of the current buffer
    ]]></Description>
           
    <Help><![CDATA[
SYNOPSIS
  \go [-m style]
              
DESCRIPTION
   Executes the SQL statement contained in the current buffer.
           
OPTIONS:
   -m style  Specifies a custom display style for showing the results
             of the execution. The available styles may be found by
             running '\help style'.
SEE ALSO
   style
        ]]></Help>
    </Command>
    
    <Command name="\reset" class="org.sqsh.commands.Reset">
        <Description><![CDATA[
              Clears the current SQL buffer of its contents.
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \reset 
              
DESCRIPTION
   Adds the current SQL command buffer to the list of historical
   buffers (viewable with \history) and creates a fresh buffer.
           
OPTIONS:
    None.
        ]]></Help>
    </Command>
    
    <Command name="\set" class="org.sqsh.commands.Set">
        <Description><![CDATA[
           Sets a variable or displays all variables.
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \set [[-x] [-l] name=value]
              
DESCRIPTION
   Sets a variable or displays all variables.
           
OPTIONS:
   If arguments are provided to \set, then the value of 
   all variables is displayed.
              
   -x  Will cause the variable to be exported to the environment
       of any processes that are spawned by sqsh during its
       execution.
   -l  Sets the value of the variable local to the current session
       only. No other sessions will see it and it will mask 
       similarly named variables in other session.
     ]]></Help>
    </Command>
    
    <Command name="\unset" class="org.sqsh.commands.Unset">
        <Description><![CDATA[
           Removes a sqsh variable.
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
  \unset var_name
              
DESCRIPTION
  Unsets a sqsh variable. It is important to note that
  it will not prevent you from removing "special" variables
  (such as $lineno). If you do inadvertantly remove a special
  variable, you'll need to quit and re-start sqsh to get it
  back.
              
  Removing a session-local variable (created with \set -x),
  will re-expose any global variable of the same name. Two
  calls to \set would need to be invoked to completely remove
  the variable in this case.
OPTIONS:
  None.
         ]]></Help>
    </Command>
    
    <Command name="\help" class="org.sqsh.commands.Help">
        <Description><![CDATA[
           Displays help for a sqsh command
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
  help [command]
              
DESCRIPTION
  Displays help for a sqsh command
           
OPTIONS:
  If a command name is provided, then help is displayed for that
  command, otherwise a list of available commands is displayed.
        ]]></Help>
    </Command>
    
    <Command name="\wrap" class="org.sqsh.commands.Wrap">
        <Description><![CDATA[
           Used internally for testing of sqsh's word-wrapping facility.
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
  wrap [width]
              
DESCRIPTION
  Wraps the text contained in the current buffer at the
  specified width and starts a new buffer.
           
OPTIONS:
  width  Specified the width at which word-wrapping will occur.
        ]]></Help>
    </Command>
    
    <Command name="\buf-copy" class="org.sqsh.commands.BufCopyOrAppend">
        <Description><![CDATA[
           Copies the contents of one SQL buffer into another
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
  \buf-copy src-buf [dst-buf]
              
DESCRIPTION
  The \buf-copy command is utilized to copy the contents of one
  SQL buffer into another SQL buffer, replacing the contents of
  the receiving buffer.
              
  History buffers may be referenced using the special reference
  notation "!..", where each dot indicates how far back in
  history ("!." is the current buffer "!.." the previous, and
  so on).  Or with the special reference notation "!N" where 
  N refers to the Nth historical buffer.
              
  For example:
              
    \buf-copy !5 !.
                
  copies the SQL you ran 5 queries ago, to the current buffer.
           
OPTIONS:
  src-buf  Indicates the buffer that you are copying from.
              
  dst-buf  Indicates the buffer you are copying to. If not
           provided this default to "!.".
       ]]></Help>
    </Command>
    
    <Command name="\buf-append" class="org.sqsh.commands.BufCopyOrAppend">
        <Description><![CDATA[
           Appends the contents of one SQL buffer into another
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
  \buf-append src-buf [dst-buf]
                  
DESCRIPTION
  The \buf-append command is utilized to append the contents of one
  SQL buffer into another SQL buffer.
                  
  History buffers may be referenced using the special reference
  notation "!..", where each dot indicates how far back in
  history ("!." is the current buffer "!.." the previous, and
  so on).  Or with the special reference notation "!N" where 
  N refers to the Nth historical buffer.
                  
  For example:
                  
    \buf-append !5 !.
                    
  appends the SQL you ran 5 queries ago to the current buffer.
               
OPTIONS:
  src-buf  Indicates the buffer that you are copying from.
                  
  dst-buf  Indicates the buffer you are append to. If not
           provided this default to "!.".
        ]]></Help>
    </Command>
        
    <Command name="\buf-edit" class="org.sqsh.commands.Edit">
    
        <Description><![CDATA[
           Edits a SQL buffer
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \buf-edit [src-buf] [dst-buf]
              
DESCRIPTION
   The \buf-edit command is used to edit the contents of a SQL buffer
   with an external text editor.  The external editor can be defined
   using the variable ${EDITOR} or ${VISUAL}. If neither of these variables
   is defined, then an appropriate text editor is chosen based upon the
   operating system in which sqsh is executing. Specifically, windows
   platforms will attempt to execute 'notepad.exe' while other platforms
   will attempt to run 'vi'.
 
ALIASES 
   By default the \buf-edit command is aliased to 'vi' and 'emacs'.
           
OPTIONS
   src-buf   Indicates which buffer should be edited. If no src-buf is 
             provided, then the current buffer will be edited (!.). If the
             current buffer is empty, then the previous buffer will be used.
             
   dst-buf   Indicates in which buffer the edited SQL should be placed. If
             no destination is provided then the current buffer (!.) is chosen.
 
SEE ALSO
   \buf-append, \buf-copy, buffers
        ]]></Help>
    </Command>
    
    <Command name="\alias" class="org.sqsh.commands.AliasCmd">
        <Description><![CDATA[
           Creates an alias
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \alias [-g] [name=text]
              
DESCRIPTION
   An alias in sqsh is slightly different (and potentially more dangerous
   if misused) than the UNIX shell equivalent. In sqsh, an alias defines a 
   piece of text that, when encountered in a user's input, is replaced with
   another piece of text. 
   
   In its simplest form, it is typically used to allow you to rename commands
   so that you can refer to them the way you want to. For example:
   
       1> \alias exit='\quit'
       
   will allow you to type:
   
       1> exit
       
   to quit sqsh (note single quotes around the '\quit'. The single quotes
   prevent sqsh from trying to interpret and remove the back-slash).
   
   Another common use of \alias may be to provide pre-argumented commands.
   For example:
   
      1> \alias '\prod'='\connect -U sa -S prod-db -d mssql-jtds'
      
   will allow you to later connect to the production database with:
   
      1> \prod-db
      Password: 
      
   And, now for the dangerous part. Under normal circumstances aliases only
   apply to the first word encountered on an input line. That is, with
   the input:
   
      1> \alias one=1
      1> select 'one';
   
   the results of the select statement would be the word 'one'. However,
   supplying the '-g' flag to alias causes the word to be replace ANYWHERE
   it appears in the line of input. so:
   
     1> \alias -g one=1
     1> select 'one';
     
   would return a result set with '1' in it. 
   
   Why is this so dangerous? Well, it means that you can do silly things
   like:
   
     1> \alias select='shutdown with no wait select'
     
   I'll leave it as an excersize for the reader to figure out what this
   would do (although it would only be effective on Sybase or MSSQL).
     
OPTIONS
   -g      Causes an alias to be applied globally to a line, anywhere the
           name of the alias appears. Without this flag, the alias will
           only apply if it is the first word on the line.
        ]]></Help>
    </Command>
    
    <Command name="\end" class="org.sqsh.commands.End">
        <Description><![CDATA[
           Ends the current session
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \end [next-session]
              
DESCRIPTION
   The \end command ends the current session and switches to another
   session.
           
OPTIONS
   next-session  If provided, causes the current session to be ended and
                 the context switched to a specific session (to see a list
                 of session's, run the \sessions command). If not provided,
                 then the next available session will be utilized.
        ]]></Help>
    </Command>
    
    <Command name="\buf-load" class="org.sqsh.commands.BufLoad">
        <Description><![CDATA[
           Loads an external file into a SQL buffer
        ]]></Description>
           
        <Help><![CDATA[
SYNOPSIS
   \buf-load [-a] filename [dest-buf]
              
DESCRIPTION
   The \buf-load command reads the contents of an external file into
   a SQL buffer. By default sqsh will come with an alias for \buf-load
   of ":r", so that you can do:
   
      1> :r filename.sql
      
   to read in the filename. If you do not want this behavior, then you
   can \unalias ':r' in your $HOME/.jsqsh/sqshrc file.
           
OPTIONS
   -a        Causes the contents of the file to be appended to the 
             SQL buffer, rather than replacing its contents.
   filename  The file to read.
   des-buf   The name of the destination buffer to read the file into.
             The default is "!." (the current buffer).
             
SEE ALSO
   \history, buffers
        ]]></Help>
    </Command>
    
    <Command name="\tables" class="org.sqsh.commands.Tables">
        <Description>Displays tables, views, synonyms, etc.</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \tables [-p table_pattern] [-s schema_pattern] [type]
              
DESCRIPTION
   Displays information about tables (and table-related objects) that are
   available within the current database (catalog). This function requires
   that the JDBC driver support meta-data lookup functionality, which not
   all drivers support (although most do).
   
OPTIONS
   -p table_pattern  - A SQL pattern to be used to filter the set of object
        names that are displayed.
   -s schema_pattern - A SQL pattern to be used to filter the set of object
        schema names that are displayed. For most databases, the "schema
        name" refers to the name of the owner of the object.
   type - This can be used to restrict the types of objects that are displayed.
        If type is not provided, then all object types are returned. Available
        types are:
        
           user     - Displays only user-created tables 
           system   - Displays only system tables 
           view     - Displays only views
           alias    - Displays only aliases
           synonym  - Displays only synonyms
SEE ALSO
   \databases, \describe
        ]]></Help>
    </Command>
    
    <Command name="\databases" class="org.sqsh.commands.Databases">
        <Description>Displays set of available databases (catalogs)</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \databases
              
DESCRIPTION
   Displays the set of databases (a.k.a "catalogs") that are available
   on the server. Not all database servers support multiple database
   instances, so the command may fail in these circumstances.
   
ALIASES
   Sqsh automatically aliases this command as "\dbs".
   
OPTIONS
   None.
   
SEE ALSO
   \tables, \describe
        ]]></Help>
    </Command>
    
    <Command name="\describe" class="org.sqsh.commands.Describe">
        <Description>Displays a description of a table (or view)</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \describe [-a] object_name
              
DESCRIPTION
   Describes the database structure for a provided object name. This
   functionality relies upon support from the underlying JDBC driver
   and thus may fail against some platforms. 
   
OPTIONS
   -a          Shows all available information about the table that  
               the JDBC driver provides. Without this flag \desribe will
               attempt to keep the output to the more useful data.
   object_name The object name to be described. This can be a fully
               qualified object name if desired (e.g. "mydb.dbo.table").
   
SEE ALSO
   \tables, \columns
        ]]></Help>
    </Command>
    
    <Command name="\macro" class="org.sqsh.commands.Macro">
        <Description>Creates a velocimacro from the current buffer</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \macro
              
DESCRIPTION
   This \macro command takes the current buffer that you are typing into
   and runs it through the Velocity engine, with the primary purpose of 
   allowing you to define re-usable macros (velocimacros).
   
   By way of example:
   
      1> #macro (prod $tab)
      2> use $tab
      3> #end
      4> \macro
      Ok.
      1> #u('master')
      2> \go
      
   We have defined a macro called #u() that takes the name of a database
   and expands to be  "use" command on that database (granted, this is a
   pretty worthless example, but you get the idea).
   
   For more details on velocity and velocimacros, see:
   
      http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html
   
OPTIONS
   None
   
SEE ALSO
   buffers
        ]]></Help>
    </Command>
    
    <Command name="\eval" class="org.sqsh.commands.Eval">
        <Description>Read and execute an input file full of SQL</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \eval filename
              
DESCRIPTION
   The \eval command reads in and processes a file full of SQL in the context
   of the current session. That is, it treats the SQL and/or sqsh commands 
   contained in the file as if you had typed them at the prompt. The one 
   exception to this rule is that the SQL contained in the file will not be
   added to your SQL history.
   
ALIASES
   This command is automatically aliased to ":e", so that you may do:
   
      :e filename
      
   at the prompt.
   
OPTIONS
   filename  The name of the file to execute.
   
SEE ALSO
   \buf-load
        ]]></Help>
    </Command>
    
    <Command name="\parse" class="org.sqsh.commands.Parse">
        <Description>(Internal) Used to test SQL parsing</Description>
           
        <Help><![CDATA[
SYNOPSIS
   \parse
              
DESCRIPTION
   The \parse command is used internally for sqsh development. It
   is used to parse the contents of the current SQL buffer which is
   a component of the tab completion logic.
   
OPTIONS
   None.
        ]]></Help>
    </Command>
</Commands>